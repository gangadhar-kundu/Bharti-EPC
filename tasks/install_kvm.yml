---
#Registering system with RHN.

- name: rhn | registering system with RHN
  command: /usr/bin/subscription-manager register --username={{ rhn_user }} --password={{ rhn_password }} --name={{ hostname_full }}
  tags:
    - rhn
 

# Find the pool id and atatch
- name: Find the entitlement pool ID for Red Hat OpenStack Platform director
  shell: subscription-manager list --available --all --matches="Red Hat OpenStack"
  register: pool_id
   
- name: attach the pool ID
  shell: subscription-manager attach --pool={{pool_id}}

#Enabling the repos
- name: rhn | enabling the right repos
  command: /usr/bin/subscription-manager repos --disable "*" --enable rhel-7-server-rpms --enable rhel-7-server-rh-common-rpms --enable rhel-server-rhscl-7-rpms
  

 # validation
- name: repo list
  command: yum repolist all


#Installing the Software
- name: installing | installing the required software
  become: yes
  yum:
    name: "{{ item }}"
    state: latest
  with_items:
    - libguestfs-tools
    - libvirt
    - qemu-kvm
    - virt-manager
    - virt-install
    - xorg-x11-apps
    - xauth
    - virt-viewer
    - libguestfs-xfs
  notify: enable_service

- name: installing | installing rhel-guest-image for templates
  become: yes
  yum:
    name: "{{ item }}"
    state: latest
  with_items:
    - rhel-guest-image-7
    
#Create the template 

- name: prepare | create directory for Virtual Machines
  become: yes
  file:
    path: "{{ vm_directory }}"
    state: directory
    owner: root
    group: root
    mode: 0775
    
# create directory for template files.

- name: prepare | create directory for Virtual Machines
  become: yes
  file:
    path: "{{ template_directory }}"
    state: directory
    owner: root
    group: root
    mode: 0775

- name: copy template file from user share directory to the template directory
  copy:
    src: /usr/share/rhel-guest-image-7
    dest: "{{ template_directory }}"
    owner: foo
    group: foo

- name: prepare | create template file
  become: yes
  shell: qemu-img create -f qcow2 {{ vm_directory}}/{{ template_name }}.qcow2 {{ template_size }}


- name: prepare | register rhel-guest-image-7 name
  become: yes
  shell:  ls {{ template_directory }}/rhel-guest-image-7/ | grep qcow2
  register: vm

- debug: var=vm.stdout_lines
- name: prepare | expand file with rhel7-image
  become: yes
  shell: virt-resize --expand /dev/sda1 {{ template_directory }}/rhel-guest-image-7/{{ item }} {{ vm_directory}}/{{ template_name }}.qcow2
  with_items: vm.stdout_lines


- name: prepare | set root password
  become: yes
  shell: virt-customize -a {{ vm_directory}}/{{ template_name }}.qcow2 --root-password password:{{ root_password }}

- name: prepare | remove cloud init
  become: yes
  shell: virt-customize -a {{ vm_directory}}/{{ template_name }}.qcow2 --run-command 'yum remove cloud-init* -y'

#Create Virtual Machine

- name: install needed network manager libs
  package: 
    name:
     - NetworkManager-glib
     - nm-connection-editor
     - libsemanage-python
     - policycoreutils-python
    state: present


#Interface, Bond and Vlan
- name:  nmcli add Ethernet 
  nmcli:
      type: ethernet
      conn_name: '{{ item.conn_name }}'
      ip4: '{{ item.ip4 }}'
      gw4: '{{ item.gw4 }}'
      state: present
  with_items:
      - '{{ nmcli_ethernet }}'
- name:  nmcli add bond 
  nmcli:
      type: bond
      conn_name: '{{ item.conn_name }}'
      ip4: '{{ item.ip4 }}'
      gw4: '{{ item.gw4 }}'
      mode: '{{ item.mode }}'
      state: present
  with_items: "{{ nmcli_bond }}"

- name: nmcli add bond-slave
  nmcli:
      type: bond-slave
      conn_name: '{{ item.conn_name }}'
      ifname: '{{ item.ifname }}'
      master: '{{ item.master }}'
      state: present
  with_items:
      - '{{ nmcli_bond_slave }}'

- name:  nmcli vlan
  nmcli:
      type: vlan
      conn_name: '{{ item.conn_name }}'
      vlanid: '{{ item.vlanid }}' 
      ip4: '{{ item.ip4 }}'
      gw4: '{{ item.gw4 }}'     
      state: present
  with_items:
      - '{{ nmcli_Vlan }}'

#read value from item/template

- name: prepare | create bridge interface
  become: yes  
  shell: virsh iface-bridge {{ bridge_interface }} {{ bridge_name }}

- name: prepare | create bridge interface 2
  become: yes  
  shell: virsh iface-bridge {{ bridge_interface_2 }} {{ bridge_name_2 }}
  

- name: prepare | create virtual machine from template file
  become: yes
  shell: qemu-img create -f qcow2 -b {{ vm_directory}}/{{ template_name }}.qcow2 {{ vm_directory}}/{{ vm_name }}.qcow2
  when: create_vm  == "yes"

- name: prepare | set hostname
  become: yes
  command: virt-customize -a {{ vm_directory}}/{{ vm_name }}.qcow2 --run-command 'hostnamectl set-hostname {{ hostname_full }}'
  when: create_vm  == "yes"
  

- name: prepare | boot vm
  become: yes
  shell: virt-install --ram {{ memory_size }}  --vcpus {{ cpu_count }}  --os-variant rhel7 --disk path={{ vm_directory}}/{{ vm_name }}.qcow2,device=disk,bus=virtio,format=qcow2 --import --noautoconsole --vnc --bridge {{ bridge_name }} --name {{ vm_name }}
  when: create_vm  == "yes"








